plugins {
    id "com.gradle.plugin-publish" version "0.10.0"
    id 'java-gradle-plugin'
    id 'groovy'
    id 'maven-publish'
    id 'ivy-publish'
    id 'maven'
    id "org.sonarqube" version "2.6"
    id "jacoco"
    id "com.stehno.gradle.site" version "0.0.3"
    //id "org.asciidoctor.convert" version "2.0-alpha.5"
    id "com.dorongold.task-tree" version "1.3.1"
    id 'org.asciidoctor.gradle.asciidoctor' version '1.5.1'
}


if (project.hasProperty("signing.keyId")) {
    apply plugin: 'signing'
    signing {
        sign configurations.archives
    }
}


tasks.site.dependsOn = ['build', 'jacocoTestReport', 'groovydoc', 'asciidoctor']

asciidoctor {
    sourceDir = file('docs')
    sources {
        include 'toplevel.adoc', 'another.adoc', 'third.adoc'
    }
    outputDir = file('build/docs')
}

task publishSite(type: GradleBuild, group: 'Publishing', description: 'Publishes the documentation web site.', dependsOn: ['site']) {
    buildFile = 'publish.gradle'
    tasks = ['publishGhPages']
}


repositories {
    jcenter()
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

group = 'com.github.arekbee'
version = '0.10'
def pluginName = 'gradle-R-plugin'
def pluginDescription = 'Gradle R plugin for R projects and packages'
def packageWebsite = 'https://github.com/arekbee/gradle-R-plugin'

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

artifacts {
    archives javadocJar, sourcesJar
}




gradlePlugin {
    plugins {
        rPlugin  {
            id = "com.github.arekbee.${pluginName}"
            implementationClass = 'com.github.arekbee.RPlugin'
        }
    }
}

pluginBundle {
    website = packageWebsite
    vcsUrl = 'https://github.com/arekbee/gradle-R-plugin'
    description = pluginDescription
    tags = ['R', 'RStudio', pluginName ]

    plugins {
        rPlugin  {
            displayName = 'Gradle R Plugin'
            tags = ['R', 'devtools', 'packrat', 'RCode', 'RExec']
            version = version
        }
    }
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    testCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
        exclude group: 'org.codehaus.groovy'
    }
}


publishing {
    repositories {
        maven {
            url '../../consuming/maven-repo'

        }
        ivy {
            url '../../consuming/ivy-repo'
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = pluginName
            version = version

            from components.java
        }
    }
}



uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }

            pom.project {
                name pluginName
                packaging 'jar'
                // optionally artifactId can be defined here
                description pluginDescription
                url packageWebsite

                scm {
                    connection packageWebsite
                    developerConnection packageWebsite
                    url packageWebsite
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://github.com/arekbee/gradle-R-plugin/blob/master/LICENSE'
                    }
                }

                developers {
                    developer {
                        id 'arekbee'
                        name = 'arekbee'
                        email 'arekbee@gmail.com'
                    }
                }
            }
        }
    }
}


jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")

    }
    additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
}


test.finalizedBy(jacocoTestReport)




task runIt {
    group ='simple'
    dependsOn check
    dependsOn build
    dependsOn test
    dependsOn buildEnvironment
}

task publishItToLocal {
    group ='simple'
    dependsOn runIt
    dependsOn publish

}

task publishItToPublic {
    group ='simple'
    dependsOn publishItToLocal
    dependsOn uploadArchives
    dependsOn publishPlugins
    //dependsOn publishSite
}
